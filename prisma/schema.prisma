// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Order {
    id         String      @id @default(uuid())
    orderDate  DateTime    @default(now())
    status     OrderStatus @default(PENDING)
    total      Decimal
    userId     String
    user       User        @relation(fields: [userId], references: [id])
    orderItems OrderItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model OrderItem {
    id        String  @id @default(uuid())
    orderId   String
    order     Order   @relation(fields: [orderId], references: [id])
    productId String
    product   Product @relation(fields: [productId], references: [id])
    quantity  Int
    price     Float

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum OrderStatus {
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
}

model Product {
    id            String         @id @default(uuid())
    name          String
    description   String
    price         Float
    quantity      Int            @default(0)
    productImages ProductImage[]

    categoryId  String
    category    Category    @relation(fields: [categoryId], references: [id])
    supplierId  String?
    supplier    Supplier?   @relation(fields: [supplierId], references: [id])
    orderItems  OrderItem[]
    createdById String
    createdBy   User        @relation(fields: [createdById], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductImage {
    id        String   @id @default(uuid())
    url       String
    productId String
    product   Product  @relation(fields: [productId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category {
    id       String    @id @default(uuid())
    name     String
    products Product[]

    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt
}

model Supplier {
    id        String   @id @default(uuid())
    name      String
    email     String   @unique
    phone     String
    addressId String
    address   Address  @relation(fields: [addressId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    products Product[]
}

model Address {
    id         String     @id @default(uuid())
    street     String
    city       String
    state      String
    postalCode String?
    country    String?
    companies  Supplier[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
// model Account {
//     id                       String  @id @default(cuid())
//     userId                   String
//     type                     String
//     provider                 String
//     providerAccountId        String
//     refresh_token            String? // @db.Text
//     access_token             String? // @db.Text
//     expires_at               Int?
//     token_type               String?
//     scope                    String?
//     id_token                 String? // @db.Text
//     session_state            String?
//     user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//     refresh_token_expires_in Int?

//     @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model User {
    id            String    @id @default(cuid())
    name          String?
    phoneNumber   String    @unique
    password      String
    phoneVerified DateTime?
    image         String?

    // accounts Account[]
    // sessions Session[]
    role    UserRole  @default(CUSTOMER)
    orders  Order[]
    product Product[]
}

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }

enum UserRole {
    SUPERADMIN
    ADMIN
    CUSTOMER
}
