// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model PurchaseOrder {
    id                   String                @id @default(uuid())
    orderDate            DateTime              @default(now())
    expectedDeliveryDate DateTime
    status               OrderStatus           @default(PENDING)
    totalAmount          Float
    supplierId           String
    supplier             Supplier              @relation(fields: [supplierId], references: [id])
    createdAt            DateTime              @default(now())
    updatedAt            DateTime              @updatedAt
    purchaseOrderDetails PurchaseOrderDetail[]
}

model PurchaseOrderDetail {
    id              String        @id @default(uuid())
    quantityOrdered Int
    pricePerUnit    Float
    totalPrice      Float
    purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
    purchaseOrderId String

    product   Product? @relation(fields: [productId], references: [id])
    productId String?
}

enum OrderStatus {
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
}

model Product {
    id          String  @id @default(uuid())
    name        String
    description String
    sku         String  @unique
    barcode     String? @unique

    productImages String?

    price           Float
    costPrice       Float
    quantityOnStock Int?  @default(0)
    reorderLevel    Int?  @default(0)

    categoryId String
    category   Category @relation(fields: [categoryId], references: [id])
    supplierId String
    supplier   Supplier @relation(fields: [supplierId], references: [id])

    createdById String
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    salesDetail          SalesDetail[]
    purchaseOrderDetails PurchaseOrderDetail[]
    inventoryAdjustment  InventoryAdjustment[]
    address              Address?              @relation(fields: [addressId], references: [id])
    addressId            String?
    inventoryLog         InventoryLog[]
}

model Category {
    id       String    @id @default(uuid())
    name     String
    products Product[]

    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt
}

model Supplier {
    id          String   @id @default(uuid())
    name        String
    email       String?
    phoneNumber String   @unique
    addressId   String?
    address     Address? @relation(fields: [addressId], references: [id])
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    products       Product[]
    purchaseOrders PurchaseOrder[]
}

model Sale {
    id             String        @id @default(uuid())
    saleDate       DateTime      @default(now())
    total_amount   Float
    payment_method String
    status         String
    created_at     DateTime      @default(now())
    salesDetails   SalesDetail[]
}

model SalesDetail {
    id             String  @id @default(uuid())
    quantity_sold  Int
    price_per_unit Float
    total_price    Float
    sale           Sale    @relation(fields: [saleId], references: [id])
    saleId         String
    product        Product @relation(fields: [productId], references: [id])
    productId      String
}

enum AdjustmentType {
    INCREASE
    DECREASE
    CORRECTION
    WRITTEN_OFF
}

model InventoryAdjustment {
    id               String         @id @default(uuid())
    adjustmentType   AdjustmentType
    quantityAdjusted Int
    reason           String?
    adjustedBy       User           @relation(fields: [userId], references: [id])
    userId           String
    product          Product        @relation(fields: [productId], references: [id])
    productId        String
    createdAt        DateTime?      @default(now())
    inventoryLog     InventoryLog   @relation(fields: [inventoryLogId], references: [id])
    inventoryLogId   String         @unique
}

enum ChangeType {
    SALE
    PURCHASE
    ADJUSTMENT
}

model Address {
    id         String    @id @default(uuid())
    street     String
    city       String
    state      String
    postalCode String?
    country    String?
    products   Product[]

    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    supplier  Supplier[]
}

model InventoryLog {
    id             String     @id @default(cuid())
    changeType     ChangeType
    quantityChange Int
    changedAt      DateTime   @default(now())
    referenceId    String?
    product        Product    @relation(fields: [productId], references: [id])
    productId      String

    adjustment InventoryAdjustment?

    createdAt DateTime @default(now())
}

model Customer {
    id         String   @id @default(cuid())
    name       String
    email      String?
    phone      String   @unique
    address    String
    created_at DateTime @default(now())
}

model User {
    id            String    @id @default(cuid())
    name          String?
    phoneNumber   String    @unique
    password      String
    phoneVerified DateTime?
    image         String?

    role                UserRole              @default(ADMIN)
    product             Product[]
    inventoryAdjustment InventoryAdjustment[]
}

enum UserRole {
    ADMIN
    MANAGER
    STAFF
}
